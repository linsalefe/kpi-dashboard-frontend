"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Plus, TrendingUp, DollarSign, Users, Target, Filter } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { KPICard } from "@/components/charts/KPICard";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";
import api from "@/lib/api";
import { useToast } from "@/hooks/use-toast";
import { PRODUTOS_OPTIONS } from "@/types/marketing";

export default function MarketingDashboardPage() {
  const router = useRouter();
  const { toast } = useToast();
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState<any>(null);
  const [data, setData] = useState<any[]>([]);
  
  // Filtros
  const [dataInicio, setDataInicio] = useState("");
  const [dataFim, setDataFim] = useState("");
  const [produtoFiltro, setProdutoFiltro] = useState("");

  useEffect(() => {
    loadData();
  }, [dataInicio, dataFim, produtoFiltro]);

  const loadData = async () => {
    try {
      setLoading(true);
      
      // Construir query params
      const params = new URLSearchParams();
      if (dataInicio) params.append("data_inicio", dataInicio);
      if (dataFim) params.append("data_fim", dataFim);
      if (produtoFiltro) params.append("produto", produtoFiltro);

      // Buscar estatísticas
      const statsResponse = await api.get(`/marketing/stats?${params.toString()}`);
      setStats(statsResponse.data);

      // Buscar dados da tabela
      const dataResponse = await api.get(`/marketing/?${params.toString()}&limit=100`);
      setData(dataResponse.data);
    } catch (error: any) {
      toast({
        title: "Erro ao carregar dados",
        description: error.response?.data?.detail || "Erro desconhecido",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL",
    }).format(value);
  };

  const formatNumber = (value: number) => {
    return new Intl.NumberFormat("pt-BR").format(value);
  };

  // Dados para gráficos
  const chartDataByProduto = PRODUTOS_OPTIONS.map((produto) => {
    const produtoData = data.filter((d) => d.produto === produto.value);
    const investimento = produtoData.reduce((sum, d) => sum + d.investimento, 0);
    const leads = produtoData.reduce((sum, d) => sum + d.leads, 0);
    const vendas = produtoData.reduce((sum, d) => sum + d.vendas, 0);
    
    return {
      produto: produto.label,
      investimento,
      leads,
      vendas,
    };
  });

  const COLORS = ["#3b82f6", "#10b981", "#f59e0b", "#ef4444", "#8b5cf6"];

  if (loading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Carregando dados...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-start">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Marketing</h1>
          <p className="text-gray-600 mt-1">Análise de campanhas e performance</p>
        </div>
        <Button onClick={() => router.push("/dashboard/marketing/form")} className="bg-blue-600 hover:bg-blue-700">
          <Plus className="w-4 h-4 mr-2" />
          Novo Registro
        </Button>
      </div>

      {/* Filtros */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Filter className="w-5 h-5 text-blue-600" />
          <h3 className="font-semibold text-gray-900">Filtros</h3>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <Label htmlFor="data_inicio">Data Início</Label>
            <Input
              id="data_inicio"
              type="date"
              value={dataInicio}
              onChange={(e) => setDataInicio(e.target.value)}
            />
          </div>
          <div>
            <Label htmlFor="data_fim">Data Fim</Label>
            <Input
              id="data_fim"
              type="date"
              value={dataFim}
              onChange={(e) => setDataFim(e.target.value)}
            />
          </div>
          <div>
            <Label htmlFor="produto">Produto</Label>
            <Select value={produtoFiltro} onValueChange={setProdutoFiltro}>
              <SelectTrigger>
                <SelectValue placeholder="Todos os produtos" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">Todos os produtos</SelectItem>
                {PRODUTOS_OPTIONS.map((produto) => (
                  <SelectItem key={produto.value} value={produto.value}>
                    {produto.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>

      {/* KPIs */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <KPICard
            title="Investimento Total"
            value={formatCurrency(stats.totais.investimento)}
            icon={<DollarSign />}
            trend={{ value: 0, isPositive: true }}
            color="blue"
          />
          <KPICard
            title="Leads Gerados"
            value={formatNumber(stats.totais.leads)}
            icon={<Users />}
            trend={{ value: 0, isPositive: true }}
            color="green"
          />
          <KPICard
            title="CPL Médio"
            value={formatCurrency(stats.kpis.cpl)}
            icon={<Target />}
            trend={{ value: 0, isPositive: false }}
            color="purple"
          />
          <KPICard
            title="ROI"
            value={`${stats.kpis.roi.toFixed(1)}%`}
            icon={<TrendingUp />}
            trend={{ value: 0, isPositive: stats.kpis.roi > 0 }}
            color="orange"
          />
        </div>
      )}

      {/* Gráficos */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Investimento por Produto */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="font-semibold text-gray-900 mb-4">Investimento por Produto</h3>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={chartDataByProduto}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="produto" angle={-45} textAnchor="end" height={100} />
              <YAxis />
              <Tooltip formatter={(value) => formatCurrency(Number(value))} />
              <Bar dataKey="investimento" fill="#3b82f6" />
            </BarChart>
          </ResponsiveContainer>
        </div>

        {/* Leads e Vendas por Produto */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="font-semibold text-gray-900 mb-4">Leads e Vendas por Produto</h3>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={chartDataByProduto}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="produto" angle={-45} textAnchor="end" height={100} />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="leads" fill="#10b981" name="Leads" />
              <Bar dataKey="vendas" fill="#f59e0b" name="Vendas" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Tabela de Dados */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div className="p-6 border-b border-gray-200">
          <h3 className="font-semibold text-gray-900">Registros Recentes</h3>
        </div>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Data</TableHead>
              <TableHead>Produto</TableHead>
              <TableHead>Canal</TableHead>
              <TableHead>Campanha</TableHead>
              <TableHead className="text-right">Investimento</TableHead>
              <TableHead className="text-right">Leads</TableHead>
              <TableHead className="text-right">Vendas</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.length === 0 ? (
              <TableRow>
                <TableCell colSpan={7} className="text-center text-gray-500 py-8">
                  Nenhum registro encontrado
                </TableCell>
              </TableRow>
            ) : (
              data.map((row) => (
                <TableRow key={row.id}>
                  <TableCell>{new Date(row.data_ref).toLocaleDateString("pt-BR")}</TableCell>
                  <TableCell>
                    <Badge variant="outline">{row.produto}</Badge>
                  </TableCell>
                  <TableCell>{row.canal}</TableCell>
                  <TableCell>{row.campanha}</TableCell>
                  <TableCell className="text-right">{formatCurrency(row.investimento)}</TableCell>
                  <TableCell className="text-right">{formatNumber(row.leads)}</TableCell>
                  <TableCell className="text-right">{formatNumber(row.vendas)}</TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}
