"use client";

import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { KPICard } from "@/components/charts/KPICard";
import { useSocket } from "@/hooks/useSocket";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import api from "@/lib/api";
import Link from "next/link";
import {
  AreaChart,
  Area,
  LineChart,
  Line,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
} from "recharts";
import {
  TrendingUp,
  DollarSign,
  Target,
  MousePointerClick,
  Plus,
} from "lucide-react";
import { motion } from "framer-motion";
import { StaggerContainer, StaggerItem, FadeIn, SlideIn } from "@/components/animations/PageTransition";

interface MarketingStats {
  roi: number;
  cpl: number;
  taxa_conversao: number;
  ctr: number;
  total_investimento: number;
  total_leads: number;
  total_conversoes: number;
  total_cliques: number;
  total_impressoes: number;
}

export default function MarketingDashboard() {
  const [stats, setStats] = useState<MarketingStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { connected } = useSocket();

  const fetchStats = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await api.get("/marketing/stats");
      const data = response.data;

      const parsedStats: MarketingStats = {
        total_investimento: parseFloat(data.totais?.investimento || 0),
        total_leads: parseInt(data.totais?.leads || 0),
        total_conversoes: parseInt(data.totais?.conversoes || 0),
        total_cliques: parseInt(data.totais?.cliques || 0),
        total_impressoes: parseInt(data.totais?.impressoes || 0),
        roi: parseFloat(data.metricas?.roi_percentual || 0),
        cpl: parseFloat(data.metricas?.cpl || 0),
        taxa_conversao: parseFloat(data.metricas?.taxa_conversao_percentual || 0),
        ctr: parseFloat(data.metricas?.ctr_percentual || 0),
      };

      setStats(parsedStats);
    } catch (err: any) {
      console.error("Erro ao buscar stats:", err);
      setError(err.detail || "Erro ao carregar estatísticas");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchStats();
  }, []);

  useEffect(() => {
    const handleKPIUpdate = (data: any) => {
      if (data.setor === "marketing") {
        fetchStats();
      }
    };

    if (typeof window !== "undefined") {
      window.addEventListener("kpi:update", handleKPIUpdate as any);
      return () => {
        window.removeEventListener("kpi:update", handleKPIUpdate as any);
      };
    }
  }, []);

  const evolucaoMensal = [
    { mes: "Jan", investimento: 5000, leads: 200, conversoes: 30 },
    { mes: "Fev", investimento: 6000, leads: 240, conversoes: 36 },
    { mes: "Mar", investimento: 7500, leads: 300, conversoes: 45 },
    { mes: "Abr", investimento: 8200, leads: 328, conversoes: 49 },
  ];

  const porCanal = [
    { canal: "Facebook", leads: 120, investimento: 1500 },
    { canal: "Google", leads: 180, investimento: 2000 },
    { canal: "Instagram", leads: 90, investimento: 1200 },
    { canal: "LinkedIn", leads: 60, investimento: 800 },
  ];

  if (loading) {
    return (
      <FadeIn>
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <h1 className="text-3xl font-bold text-gray-900">Marketing</h1>
              <p className="text-gray-500">Carregando métricas...</p>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {[1, 2, 3, 4].map((i) => (
              <motion.div
                key={i}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: i * 0.1 }}
              >
                <Card className="animate-pulse">
                  <CardHeader className="space-y-2">
                    <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                    <div className="h-8 bg-gray-200 rounded w-3/4"></div>
                  </CardHeader>
                </Card>
              </motion.div>
            ))}
          </div>
        </div>
      </FadeIn>
    );
  }

  if (error) {
    return (
      <FadeIn>
        <div className="space-y-6">
          <h1 className="text-3xl font-bold text-gray-900">Marketing</h1>
          <Card className="border-red-200 bg-red-50">
            <CardContent className="pt-6">
              <p className="text-red-600 font-medium">{error}</p>
              <Button onClick={fetchStats} className="mt-4" variant="outline">
                Tentar novamente
              </Button>
            </CardContent>
          </Card>
        </div>
      </FadeIn>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header com animação */}
      <SlideIn direction="down">
        <div className="flex items-center justify-between">
          <div className="space-y-1">
            <h1 className="text-3xl font-bold text-gray-900">Marketing</h1>
            <p className="text-gray-500">
              Acompanhe métricas de campanhas e performance em tempo real
            </p>
          </div>
          <div className="flex items-center gap-3">
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ type: "spring", stiffness: 200, delay: 0.2 }}
            >
              <Badge
                variant={connected ? "default" : "secondary"}
                className="px-3 py-1"
              >
                <motion.span
                  className={`w-2 h-2 rounded-full mr-2 ${
                    connected ? "bg-green-500" : "bg-gray-400"
                  }`}
                  animate={connected ? { scale: [1, 1.2, 1] } : {}}
                  transition={{ duration: 2, repeat: Infinity }}
                />
                {connected ? "Conectado" : "Desconectado"}
              </Badge>
            </motion.div>

            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Link href="/dashboard/marketing/form">
                <Button className="bg-cenat-secondary hover:bg-cenat-secondary/90">
                  <Plus className="w-4 h-4 mr-2" />
                  Nova Campanha
                </Button>
              </Link>
            </motion.div>
          </div>
        </div>
      </SlideIn>

      {/* KPIs Grid com Stagger Animation */}
      <StaggerContainer className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StaggerItem>
          <KPICard
            titulo="ROI"
            valor={stats?.roi ?? 0}
            formato="percentual_direto"
            descricao="Retorno sobre Investimento"
            icone={<TrendingUp className="w-5 h-5" />}
            variacao={15.3}
          />
        </StaggerItem>
        <StaggerItem>
          <KPICard
            titulo="CPL"
            valor={stats?.cpl ?? 0}
            formato="moeda"
            decimais={2}
            descricao="Custo por Lead"
            icone={<DollarSign className="w-5 h-5" />}
            variacao={-8.2}
          />
        </StaggerItem>
        <StaggerItem>
          <KPICard
            titulo="Taxa de Conversão"
            valor={stats?.taxa_conversao ?? 0}
            formato="percentual_direto"
            decimais={1}
            descricao="Leads convertidos"
            icone={<Target className="w-5 h-5" />}
            variacao={5.7}
          />
        </StaggerItem>
        <StaggerItem>
          <KPICard
            titulo="CTR"
            valor={stats?.ctr ?? 0}
            formato="percentual_direto"
            decimais={2}
            descricao="Taxa de Cliques"
            icone={<MousePointerClick className="w-5 h-5" />}
            variacao={2.1}
          />
        </StaggerItem>
      </StaggerContainer>

      {/* Gráficos com Fade In */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <FadeIn delay={0.4} className="col-span-1 lg:col-span-2">
          <Card className="border-gray-200/50 hover:shadow-lg transition-shadow duration-300">
            <CardHeader>
              <CardTitle className="text-lg font-semibold">
                Evolução de Investimento e Leads
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <AreaChart data={evolucaoMensal}>
                  <defs>
                    <linearGradient id="colorInvestimento" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#3b82f6" stopOpacity={0} />
                    </linearGradient>
                    <linearGradient id="colorLeads" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="5%" stopColor="#10b981" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#10b981" stopOpacity={0} />
                    </linearGradient>
                  </defs>
                  <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                  <XAxis dataKey="mes" stroke="#6b7280" />
                  <YAxis stroke="#6b7280" />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: "white",
                      border: "1px solid #e5e7eb",
                      borderRadius: "8px",
                      boxShadow: "0 4px 6px -1px rgba(0, 0, 0, 0.1)",
                    }}
                  />
                  <Legend />
                  <Area
                    type="monotone"
                    dataKey="investimento"
                    stroke="#3b82f6"
                    strokeWidth={2}
                    fillOpacity={1}
                    fill="url(#colorInvestimento)"
                    name="Investimento (R$)"
                  />
                  <Area
                    type="monotone"
                    dataKey="leads"
                    stroke="#10b981"
                    strokeWidth={2}
                    fillOpacity={1}
                    fill="url(#colorLeads)"
                    name="Leads"
                  />
                </AreaChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </FadeIn>

        <FadeIn delay={0.5}>
          <Card className="border-gray-200/50 hover:shadow-lg transition-shadow duration-300">
            <CardHeader>
              <CardTitle className="text-lg font-semibold">
                Leads por Canal
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={250}>
                <BarChart data={porCanal}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                  <XAxis dataKey="canal" stroke="#6b7280" />
                  <YAxis stroke="#6b7280" />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: "white",
                      border: "1px solid #e5e7eb",
                      borderRadius: "8px",
                      boxShadow: "0 4px 6px -1px rgba(0, 0, 0, 0.1)",
                    }}
                  />
                  <Bar dataKey="leads" fill="#3b82f6" radius={[8, 8, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </FadeIn>

        <FadeIn delay={0.6}>
          <Card className="border-gray-200/50 hover:shadow-lg transition-shadow duration-300">
            <CardHeader>
              <CardTitle className="text-lg font-semibold">
                Tendência de Conversões
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={250}>
                <LineChart data={evolucaoMensal}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                  <XAxis dataKey="mes" stroke="#6b7280" />
                  <YAxis stroke="#6b7280" />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: "white",
                      border: "1px solid #e5e7eb",
                      borderRadius: "8px",
                      boxShadow: "0 4px 6px -1px rgba(0, 0, 0, 0.1)",
                    }}
                  />
                  <Line
                    type="monotone"
                    dataKey="conversoes"
                    stroke="#10b981"
                    strokeWidth={3}
                    dot={{ fill: "#10b981", r: 5 }}
                    activeDot={{ r: 7 }}
                    name="Conversões"
                  />
                </LineChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </FadeIn>
      </div>

      {/* Cards de Totais com Stagger */}
      <StaggerContainer className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
        {[
          { label: "Investimento Total", value: stats?.total_investimento, format: "currency" },
          { label: "Total de Leads", value: stats?.total_leads, format: "number" },
          { label: "Conversões", value: stats?.total_conversoes, format: "number" },
          { label: "Cliques", value: stats?.total_cliques, format: "number" },
          { label: "Impressões", value: stats?.total_impressoes, format: "number" },
        ].map((item, index) => (
          <StaggerItem key={index}>
            <motion.div whileHover={{ y: -4 }} transition={{ duration: 0.2 }}>
              <Card className="hover:shadow-md transition-shadow">
                <CardContent className="pt-6">
                  <p className="text-sm text-gray-500 mb-1 font-medium">
                    {item.label}
                  </p>
                  <p className="text-2xl font-bold text-gray-900">
                    {item.format === "currency"
                      ? `R$ ${(item.value ?? 0).toLocaleString("pt-BR", {
                          minimumFractionDigits: 2,
                          maximumFractionDigits: 2,
                        })}`
                      : (item.value ?? 0).toLocaleString("pt-BR")}
                  </p>
                </CardContent>
              </Card>
            </motion.div>
          </StaggerItem>
        ))}
      </StaggerContainer>
    </div>
  );
}
